datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id    			Int			@id @default(autoincrement())
  username  		String		@unique
  password 			String
  email 			String		@unique
  avatar 			String		@default("img_avatar.png")
  status 			Boolean     @default(false)  
  wins				Int			@default(0)
  losses 			Int			@default(0)

  player 			Player?
  gooAuth			Boolean		@default(false)

  friends1  		Friend[] 	@relation("User1Friends")
  friends2  		Friend[] 	@relation("User2Friends")

  won				Match[]		@relation("won")
  lost				Match[]		@relation("lost")

  chatsAsUser1		Chat[]		@relation("ChatUser1")
  chatsAsUser2		Chat[]		@relation("ChatUser2")
  sentMessages		Message[]	@relation("SentMessages")
  receivedMessages	Message[]	@relation("ReceivedMessages")

}


model Player {
    id            Int  	 @id @default(autoincrement())
    userId        Int     @unique
    x             Int @default(0)
    y             Int @default(0)

    user          User   @relation(fields: [userId], references: [id])
}


model Friend {
    id    		    Int 	 @id @default(autoincrement())    
	user1Id			Int   
	user2Id			Int 
	status		    Status
	initiator		Int
	blocker			Int

	user1     		User	@relation("User1Friends", fields: [user1Id], references: [id])
	user2     		User	@relation("User2Friends", fields: [user2Id], references: [id])
}

enum Status {
	PENDING
	FRIENDS
	BLOCKED
}


model Match {
	
	id				Int		@id @default(autoincrement())
	player1			Int
	player2			Int
	tournament		Boolean	@default(false)
	winner			Int?
	loser			Int?
	highScore		Int		@default(0)
	lowScore		Int		@default(0)
	status			State
	date			DateTime

	won				User?	@relation("won", fields: [winner], references: [id])
	lost			User?	@relation("lost", fields: [loser], references: [id])
}

enum State {
	INPROGRESS
	FINISHED
}


model Chat {

	id 				Int			@id @default(autoincrement())
	
	user1Id			Int	
	user1			User			@relation("ChatUser1", fields: [user1Id], references: [id])
	user2Id			Int
	user2			User			@relation("ChatUser2", fields: [user2Id], references: [id])
	
	messages		Message[]
}

model Message {
	
	id				Int			@id @default(autoincrement())
	chatId			Int
	chat			Chat		@relation(fields: [chatId], references: [id])
	
	senderId		Int
	sender			User		@relation("SentMessages", fields: [senderId], references: [id])
	receiverId		Int
	receiver		User		@relation("ReceivedMessages", fields: [receiverId], references: [id])

	text			String
	timestamp		DateTime	@default(now())

}

